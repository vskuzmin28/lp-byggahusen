@import '../styles/fonts.css';
.logo,
a,
a:hover,
li,
img,
input,
textarea,
.prev,
.next,
.popup__icon-close {
  transition: all 0.5s ease-in-out;
}
.list__number__element {
  transition: all 0.2s ease-in-out;
}
body {
  cursor: default;
  overflow-x: hidden !important;
}
a {
  cursor: pointer;
}
.color-red {
  color: #cd333f;
}
.color-blue {
  color: #195abc;
}
.left {
  float: left;
  margin: 0;
}
.right {
  float: right;
}
.no-margin {
  margin: 0 !important;
  float: none !important;
}
@media only screen and (min-width: 320px) and (max-width: 1100px) {
  .popup {
    position: relative;
    width: 90%;
    margin: 0 auto;
    height: auto;
    overflow: hidden;
    padding: 20px;
    background: #fff;
    border-radius: 6px;
    font: 14px 'robotoregular';
    -webkit-box-shadow: 0px 7px 25px -7px rgba(0, 0, 0, 0.53);
    -moz-box-shadow: 0px 7px 25px -7px rgba(0, 0, 0, 0.53);
    box-shadow: 0px 7px 25px -7px rgba(0, 0, 0, 0.53);
  }
  .popup h4 {
    margin-bottom: 10px;
    font: 18px 'robotomedium';
  }
  .popup form {
    margin-top: 30px;
  }
  .popup__input {
    margin-bottom: 20px;
    width: 100%;
    height: 40px;
    display: inline-block;
  }
  .popup__input input[type="text"] {
    width: 100%;
    padding: 0 20px;
    height: 40px;
    border: 0;
    border-radius: 6px;
    background: #e5e5e5;
    font: 14px 'robotolight';
    color: #000;
  }
  .popup__button {
    margin: 0 auto;
    width: 220px;
  }
  .popup__button input[type=submit] {
    border: 0;
    padding: 0;
    width: 220px;
    text-align: center !important;
  }
  .popup-thanks p {
    margin-top: 20px;
    font: 16px 'robotolight';
    text-align: center;
    text-transform: uppercase;
  }
  .popup__icon-close {
    position: absolute;
    display: block;
    right: 10px;
    top: 10px;
  }
  .popup__icon-close img {
    display: block;
    width: 24px;
    height: 24px;
  }
  .popup__icon-close img:hover {
    transform: rotate(180deg);
  }
}
@media only screen and (min-width: 1100px) {
  .popup {
    position: relative;
    width: 400px;
    height: auto;
    overflow: hidden;
    padding: 20px;
    background: #fff;
    border-radius: 6px;
    font: 14px 'robotoregular';
    -webkit-box-shadow: 0px 7px 25px -7px rgba(0, 0, 0, 0.53);
    -moz-box-shadow: 0px 7px 25px -7px rgba(0, 0, 0, 0.53);
    box-shadow: 0px 7px 25px -7px rgba(0, 0, 0, 0.53);
  }
  .popup h4 {
    margin-bottom: 10px;
    font: 18px 'robotomedium';
  }
  .popup form {
    margin-top: 30px;
  }
  .popup__input {
    margin-bottom: 20px;
    width: 100%;
    height: 40px;
    display: inline-block;
  }
  .popup__input input[type="text"] {
    width: 100%;
    padding: 0 20px;
    height: 40px;
    border: 0;
    border-radius: 6px;
    background: #e5e5e5;
    font: 14px 'robotolight';
    color: #000;
  }
  .popup__button {
    margin: 0 auto;
    width: 220px;
  }
  .popup__button input[type=submit] {
    border: 0;
    padding: 0;
    width: 220px;
    text-align: center !important;
  }
  .popup-thanks p {
    margin-top: 20px;
    font: 16px 'robotolight';
    text-align: center;
    text-transform: uppercase;
  }
  .popup__icon-close {
    position: absolute;
    display: block;
    right: 10px;
    top: 10px;
  }
  .popup__icon-close img {
    display: block;
    width: 24px;
    height: 24px;
  }
  .popup__icon-close img:hover {
    transform: rotate(180deg);
  }
}
/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
